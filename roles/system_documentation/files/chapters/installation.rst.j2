Installation Manual
===================

This chapter describes the installation of the PKI.

Create repositories
-------------------

{% for server in servers.repositories %}
Create {{ server.name }}
~~~~~~~{{ '~' * server.name | length }}

#. Log in to {{ server.name }} using RDP.

#. Optionally adjust the keyboard layout using PowerShell::

    Set-WinUserLanguageList -LanguageList sv-SE, en-US -Force

#. Reset the password of the local administrator account using PowerShell::

    $NewPassword = Read-Host -AsSecureString
    $UserAccount = Get-LocalUser -Name "{{ accounts.local.user }}"
    $UserAccount | Set-LocalUser -Password $NewPassword

#. Install IIS and remove the default website using PowerShell::

    Install-WindowsFeature -Name Web-Server -IncludeManagementTools
    Remove-IISSite -Name "Default Web Site"

#. Create a folder where the repository files should be stored::

    New-Item -Path "C:\inetpub" -Name "pki" -ItemType "directory"

#. Create a new website for the repository::

    New-IISSite -Name PKI -PhysicalPath "C:\inetpub\pki" -Protocol http -BindingInformation "*:80:"

#. Create a local user account::

    $Password = ConvertTo-SecureString "{{ secret }}" -AsPlaintext -Force
    New-LocalUser -AccountNeverExpires -Name "PKIUser" -Password $Password

#. Create an SMB share using PowerShell::

    New-SmbShare -Name "PKI Repository" -Path "C:\inetpub\pki"

#. Grant NTFS and SMB share permissions::

    $Acl = Get-ACL "C:\inetpub\pki\"
    $AccessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("Everyone", "FullControl", "ContainerInherit,Objectinherit", "None", "Allow")
    $Acl.AddAccessRule($AccessRule)
    Set-ACL "C:\inetpub\pki\" $Acl
    Grant-SmbShareAccess -Name "PKI Repository" -AccountName "{{ server.name ~ '.' ~ customer.domain }}\PKIUser" -AccessRight Full -Force
{% endfor %}

{% if servers.issuing_cas | selectattr('location.existing_backup', 'defined') | list | length > 0 %}
Add URL redirects
~~~~~~~~~~~~~~~~~

If the old PKI uses AIA and CDP URLs which do not match the URLs used by this installation, you need to add redirects in IIS to ensure that validation of existing certificates still work.

#. To add a redirect in IIS, you must download and install the *URL Rewrite* module. You can download it from `here <https://download.microsoft.com/download/1/2/8/128E2E22-C1B9-44A4-BE2A-5859ED1D4592/rewrite_amd64_en-US.msi>`_.

#. Click on the Start button, type ``inetmgr`` and press **Enter** to start *Internet Information Services (IIS) Manager*.

#. Expand **Sites → PKI** in the tree on the left, and double-click on **URL Rewrite**.

#. In the right pane, click on **Add Rule(s)...**.

#. Select **Blank rule** and click on **OK**.

#. Create the appropriate rewrite rule and click on **Apply** in the right pane.

.. figure:: ../graphics/url_rewrite.png

   An example of a rewrite rule in IIS which redirects from ``/crl/R1.crl`` to ``/R1.crl``.

#. Add additional rewrite rules as needed. Typically, you need at least two rewrites, one for the AIA URL and one for the CDP URL. You can list the AIA and CDP URLs configured for a CA using the following PowerShell commands::

    (CertUtil -getReg "CA\CRLPublicationURLs" | Select-String "http(s)?://(.+)").Matches.Value
    (CertUtil -getReg "CA\CACertPublicationURLs" | Select-String "http(s)?://(.+)").Matches.Value

{% endif %}

{% if servers.root_ca.location.existing_backup is defined %}
Migrate the root CA
-------------------
{% else %}
Create the root CA
-------------------
{% endif %}

#. Log in to {{ servers.root_ca.name }} using RDP.

#. Optionally adjust the keyboard layout using PowerShell::

    Set-WinUserLanguageList -LanguageList sv-SE, en-US -Force

#. Check the local time against a reliable watch, and adjust it if necessary.

#. Reset the password of the local administrator account using PowerShell::

    $NewPassword = Read-Host -AsSecureString
    $UserAccount = Get-LocalUser -Name "{{ accounts.local.user }}"
    $UserAccount | Set-LocalUser -Password $NewPassword

#. Install the ADCS Windows feature::

    Install-WindowsFeature Adcs-Cert-Authority -IncludeManagementTools

{% if servers.root_ca.location.existing_backup is defined %}
#. Restore the CA certificate and private key::

    $BackupPassword = Read-Host -AsSecureString
    Install-AdcsCertificationAuthority -CAType StandaloneRootCa -CertFile '{{ servers.root_ca.location.existing_backup }}' -CertFilePassword $BackupPassword -DatabaseDirectory $(Join-Path $env:SystemRoot "System32\CertLog") -Force

#. Restore the CA database using CertUtil::

    Remove-Item C:\Windows\System32\CertLog\* -Force
    CertUtil -restoreDB {{ servers.root_ca.location.existing_backup }}

#. Import the registry keys::

    reg import {{ servers.root_ca.location.existing_backup }}\backup.reg

#. Restart ADCS::

    net stop certsvc
    net start certsvc

{% else %}
#. Create a root CA using PowerShell::

{% if servers.root_ca.policy.key_specification == 'P256' %}
    Install-AdcsCertificationAuthority -CAType StandaloneRootCa -CryptoProviderName "ECDSA_P256#{{ servers.root_ca.policy.key_storage_provider }}" -KeyLength 256 -HashAlgorithmName SHA256 -ValidityPeriod Years -ValidityPeriodUnits 25 -CACommonName "R1" -CADistinguishedNameSuffix "O={{ customer.name }},C={{ customer.country }}" -DatabaseDirectory $(Join-Path $env:SystemRoot "System32\CertLog") -Force
{% elif servers.root_ca.policy.key_specification == 'RSA4096' %}
    Install-AdcsCertificationAuthority -CAType StandaloneRootCa -CryptoProviderName "RSA#{{ servers.root_ca.policy.key_storage_provider }}" -KeyLength 4096 -HashAlgorithmName SHA256 -ValidityPeriod Years -ValidityPeriodUnits 25 -CACommonName "R1" -CADistinguishedNameSuffix "O={{ customer.name }},C={{ customer.country }}" -DatabaseDirectory $(Join-Path $env:SystemRoot "System32\CertLog") -Force
{% else %}
    Unknown key specification '{{ servers.root_ca.policy.key_specification }}'.
{% endif %}

#. Create and run the file ``C:\CASetup.bat``::

    CertUtil -setreg CA\CRLPeriodUnits 52
    CertUtil -setreg CA\CRLPeriod Weeks
    CertUtil -setreg CA\CRLDeltaPeriodUnits 0
    CertUtil -setreg CA\CRLDeltaPeriod Days

    :: https://www.pkisolutions.com/adcs-certificate-serial-number-generation-algorithms-a-comrehensive-guide
    CertUtil -setreg ca\highserial {{ servers.root_ca.policy.high_serial | default(0) }}
{% if servers.root_ca.policy.keep_expired_certificates_on_crl | default(false) %}
    CertUtil –setreg ca\CRLFlags +CRLF_PUBLISH_EXPIRED_CERT_CR
{% endif %}

    :: https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/hh831574(v=ws.11)#configure-the-ca
    CertUtil -setreg CA\CRLPublicationURLs "1:C:\%%3.crl\n2:http://pki.{{ customer.domain }}/%%3.crl"
    CertUtil -setreg CA\CACertPublicationURLs "3:http://pki.{{ customer.domain }}/%%3.crt"

    CertUtil -setreg CA\ValidityPeriodUnits 10
    CertUtil -setreg CA\ValidityPeriod Years

    CertUtil -setreg CA\AuditFilter 127

    net stop certsvc
    net start certsvc
    CertUtil -ping 30
{% endif %}

Publish root CA artefacts
-------------------------

#. Export a copy of the root CA certificate::

    CertUtil "-ca.cert" "C:\R1.crt"

#. Issue a CRL from the root CA::

    CertUtil -crl

{% for server in servers.repositories %}
#. Transfer the files ``C:\R1.crt`` and ``C:\R1.crl`` to ``C:\inetpub\pki`` on {{ server.name }}.
{% endfor %}

{% if servers.root_ca.location.existing_backup is not defined %}
#. Transfer ``C:\R1.crt`` to servers.issuing_cas[0] and log in to servers.issuing_cas[0] using RDP.

#. Publish the root CA certificate to AD::

    CertUtil -dspublish -f C:\R1.crt

{% endif %}

Prepare issuing CA machines
---------------------------

{% for issuing_ca in servers.issuing_cas %}
Prepare {{ issuing_ca.cn }}
~~~~~~~~{{ issuing_ca.cn | length * '~' }}

#. Log in to {{ issuing_ca.name }} using RDP.

#. Optionally adjust the keyboard layout using PowerShell::

    Set-WinUserLanguageList -LanguageList sv-SE, en-US -Force

#. Reset the password of the domain administrator account using PowerShell::

    $NewPassword = Read-Host -AsSecureString
    Set-ADAccountPassword -Identity {{ accounts.domain.user }} -NewPassword $NewPassword -Reset

#. Create the file ``%systemroot%\CAPolicy.inf``::

    [Version]
    Signature = "$Windows NT$"

    [Certsrv_Server]
    LoadDefaultTemplates = 0

{% if issuing_ca.location.existing_backup is undefined %}
#. Install the ADCS Windows feature::

    Install-WindowsFeature Adcs-Cert-Authority -IncludeManagementTools

#. Create an issuing CA using PowerShell::

{% if issuing_ca.policy.key_specification == 'P256' %}
    Install-AdcsCertificationAuthority -CAType EnterpriseSubordinateCa -CryptoProviderName "ECDSA_P256#{{ issuing_ca.policy.key_storage_provider }}" -KeyLength 256 -HashAlgorithmName SHA256 -CACommonName "ICA1" -CADistinguishedNameSuffix "O={{ customer.name }},C={{ customer.country }}" -OutputCertRequestFile "C:\ICA1.csr" -LogDirectory "{{ issuing_ca.location.log }}" -DatabaseDirectory "{{ issuing_ca.location.database }}" -Force
{% elif issuing_ca.policy.key_specification == 'RSA4096' %}
    Install-AdcsCertificationAuthority -CAType EnterpriseSubordinateCa -CryptoProviderName "RSA#{{ issuing_ca.policy.key_storage_provider }}" -KeyLength 4096 -HashAlgorithmName SHA256 -CACommonName "ICA1" -CADistinguishedNameSuffix "O={{ customer.name }},C={{ customer.country }}" -OutputCertRequestFile "C:\ICA1.csr" -LogDirectory "{{ issuing_ca.location.log }}" -DatabaseDirectory "{{ issuing_ca.location.database }}" -Force
{% else %}
    Unknown key specification '{{ issuing_ca.policy.key_specification }}'.
{% endif %}

#. Transfer the file ``C:\{{ issuing_ca.cn }}.req`` to {{ servers.root_ca.name }}.
{% else %}
Test {{ issuing_ca.cn }} backup integrity
~~~~~{{ issuing_ca.cn | length * '~' }}~~~~~~~~~~~~~~~~~

#. Restore the CA certificate and private key::

    $BackupPassword = Read-Host -AsSecureString
    Install-AdcsCertificationAuthority -CAType EnterpriseSubordinateCa -CertFile '{{ issuing_ca.location.existing_backup }}\{{ issuing_ca.cn}}.p12' -CertFilePassword $BackupPassword -DatabaseDirectory "{{ issuing_ca.location.database }}" -LogDirectory "{{ issuing_ca.location.log }}" -Force

#. Restore the CA database using CertUtil::

    CertUtil -restoreDB "{{ issuing_ca.location.existing_backup }}"

#. Import the registry keys::

    reg import "{{ issuing_ca.location.existing_backup }}\backup.reg"

#. Restart ADCS and make sure it starts without errors::

    net stop certsvc
    net start certsvc

#. Export the CA certificate using PowerShell::

    CertUtil "-ca.cert" "C:\{{ issuing_ca.cn }}.crt"

{% for server in servers.repositories %}
#. Transfer the file ``C:\{{ issuing_ca.cn }}.crt`` to ``C:\inetpub\pki`` on {{ server.name }}.
{% endfor %}

{% endif %}
{% endfor %}

{% for issuing_ca in servers.issuing_cas %}
Finalise the configuration of {{ issuing_ca.cn }}
------------------------------{{ issuing_ca.cn | length * '-' }}

Log in to {{ issuing_ca.cn }}
~~~~~~~~~~{{ issuing_ca.cn | length * '~' }}

#. Log in to {{ servers.root_ca.name }} using RDP.

{% if issuing_ca.location.existing_backup is not defined %}
Sign the CA certificate
~~~~~~~~~~~~~~~~~~~~~~~

#. Submit the CSR for {{ issuing_ca.cn }} and save the request ID::

    $request = CertReq -submit -config - C:\ICA1.csr | Out-String | Select-String 'RequestId: (\d+)'
    $requestId = $request.Matches[0].Groups[1].Value.Trim()

#. Accept the request and retrieve a copy of the issuing CA certificate::

    CertUtil -resubmit $requestId
    CertReq -retrieve -config - $requestId C:\{{ issuing_ca.cn }}.crt

#. Transfer the files ``C:\{{ issuing_ca.cn }}.crt`` and ``C:\R1.crt`` to {{ issuing_ca.name }}.

{% for server in servers.repositories %}
#. Transfer the file ``C:\{{ issuing_ca.cn }}.crt`` to ``C:\inetpub\pki`` on {{ server.name }}.
{% endfor %}

Import the CA certificate
~~~~~~~~~~~~~~~~~~~~~~~~~

#. Install the CA certificate chain::

    Import-Certificate -FilePath C:\R1.crt -CertStoreLocation Cert:\LocalMachine\Root
    CertUtil -installcert "C:\{{ issuing_ca.cn }}.crt"

Configure registry settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Create and run the file ``C:\CASetup.bat``::

    CertUtil -setreg CA\CRLPeriodUnits {{ issuing_ca.crl_period | default(7) }}
    CertUtil -setreg CA\CRLPeriod Days
    CertUtil -setreg CA\CRLDeltaPeriodUnits 0
    CertUtil -setreg CA\CRLDeltaPeriod Days

    :: https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/hh831574(v=ws.11)#configure-the-ca
    CertUtil -setreg CA\CRLPublicationURLs "1:C:\%%3.crl\n2:http://pki.{{ customer.domain }}/%%3-%%8.crl"
    CertUtil -setreg CA\CACertPublicationURLs "3:http://pki.{{ customer.domain }}/%%4.crt"

    CertUtil -setreg CA\ValidityPeriodUnits 2
    CertUtil -setreg CA\ValidityPeriod Years

    CertUtil -setreg CA\AuditFilter 127

    net stop certsvc
    net start certsvc
    CertUtil -ping 30

{% endif %}

{% if smtp_exit_module is defined and issuing_ca.smtp_exit_module %}
Install the SMTP exit module
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Create and run the file ``C:\ConfigureSMTPExitModule.bat``.

    .. literalinclude:: ../scripts/smtp_exit_modules/default.bat
       :language: batch
       :linenos:

{% endif %}

{% if issuing_ca.dcom_port is defined %}
Set a static DCOM port
~~~~~~~~~~~~~~~~~~~~~~

#. Click on the start button, type ``Component Services`` and press **Enter**.

#. In the tree on the left, expand **Component Services → Computers → My Computer** and click on **DCOM Config**.

#. In the panel on the right, right-click on **CertSrv Request** on click on **Properties**.

#. Click on the **Endpoints** tab.

#. Click on **Add**. The *DCOM Enpoint Properties* dialog is shown.

#. Select the option **Use static endpoint** and type in the port number ``{{ issuing_ca.dcom_port }}`` in the textbox, then click on **OK**.

#. Click on **OK** to close the *CertSrv Request Properties* dialog.

.. figure:: ../graphics/dcom_configuration.png

        DCOM configuration for *CertSrv Request* with a static endpoint for port 4000.

#. Disable RPC for the *ICertPassage* interface::

    certutil -setreg ca\interfaceflags +IF_NORPCICERTREQUEST

#. Restart ADCS::

    net stop certsvc
    net start certsvc

.. note:: The CA will not change listening ports until the first certificate request comes in. This means that you must send a certificate request to the CA before making adjustments to the firewall rules.

    Check which port is being used by running something like:

    .. code-block:: powershell

        netstat -anob | Select-String -Pattern certsrv.exe -Context 1,0

{% endif %}

{% if issuing_ca.web_enrollment %}
Configure web enrollment
~~~~~~~~~~~~~~~~~~~~~~~~

#. Run the following commands in PowerShell to enable web enrollment::

    Add-WindowsFeature Adcs-Web-Enrollment
    Install-AdcsWebEnrollment

#. IIS uses the built-in *WebServer* template to fetch certificates, and it must be temporarily enabled on the CA.

    Add-CATemplate -Name WebServer -Force

#. Click on the Start button, type ``inetmgr`` and press **Enter** to start *Internet Information Services (IIS) Manager*.

#. Expand ``{{ issuing_ca.name }}`` in the tree on the left.

#. Double-click on **Server Certificates**.

#. In the *Actions* pane on the right, click on **Create Domain Certificate...**.

#. Fill in the subject DN attributes using the table below.

.. list-table::
   :widths: 1 1
   :header-rows: 0

   * - **Common name**
     - ``{{ issuing_ca.name.lower() }} ~ {{ customer.domain }}``
   * - **Organisation**
     - ``{{ customer.name }}``
   * - **Organizational unit**
     - ``IT``
   * - **City/locality**
     - ``{{ customer.city }}``
   * - **State/province**
     - ``{{ customer.state }}``
   * - **Country/region**
     - ``{{ customer.country }}``

#. Click on **Next**.

#. Click on **Select...**, select the certificate authority **ICA1** in the list and click on **OK**.

#. In the *Friendly name** field, type ``{{ issuing_ca.name.lower() }} ~ {{ customer.domain }}`` and click on **Finish** to issue the web server certificate.

#. Run the following PowerShell command to disable the *WebServer* template on the CA::

    Remove-CATemplate -Name WebServer -Force

#. Expand **Sites** in the tree on the left, right-click on **Default Web Site** and click **Edit Bindings...**.

#. Click on **Add...** to add a new binding, and make the following adjustments:

    #. In the *Type* dropdown, pick **https**.

    #. In the *Host name* field, type ``{{ issuing_ca.name.lower() }} ~ {{ customer.domain }}``.

    #. In the *SSL certificate* dropdown, select **{{ issuing_ca.name.lower() }} ~ {{ customer.domain }}**.

#. Click on **OK** to add the new binding.

#. Click on **Close** to close the *Site Bindings* dialog window.

#. Expand **Default Web Site** in the tree on the left, and click on **CertSrv**.

#. Click on **SSL Settings**.

#. Tick the checkbox **Require SSL** and click on **Apply** in the pane on the right.
{% endif %}

Schedule publication of CRLs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Create the file ``C:\CopyCRL.bat``::

{% for server in servers.repositories %}
    :: Copy CRLs to {{ server.name }}
    net use X: "\\{{ server.name }}.{{ customer.domain }}\PKI Repository" "{{ secret }}" /user:{{ server.name }}.{{ customer.domain }}\PKIUser /persistent:Yes
    xcopy "C:\*.crl" X:\ /y
    net use X: /delete
{% endfor %}

#. Schedule a daily background task::

    $actions = New-ScheduledTaskAction -Execute "C:\CopyCRL.bat"
    $trigger = New-ScheduledTaskTrigger -Daily -At "02:00"
    $principal = New-ScheduledTaskPrincipal -UserId "SYSTEM"
    $settings = New-ScheduledTaskSettingsSet -RunOnlyIfNetworkAvailable -WakeToRun
    $task = New-ScheduledTask -Action $actions -Principal $principal -Trigger $trigger -Settings $settings
    Register-ScheduledTask "CopyCRL" -InputObject $task

#. Issue a CRL and run the task to copy it to the repository::

    CertUtil -crl
    Start-ScheduledTask -TaskName "CopyCRL"

{% endfor %}

Configure Active Directory
--------------------------

{% if templates is defined and templates | selectattr('from', 'defined') | list | length > 0 %}
Create certificate templates
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#. Log in to one of the domain controllers using RDP.

    .. note:: You can use the command ``nltest /dclist:{{ customer.domain }}`` to get the names of the domain controllers.

#. Click on the start button, type ``mmc.exe`` and press **Enter** to open Microsoft Management Console.

#. Press **Ctrl + M**, double-click on the **Certificate Templates** snap-in and click on **OK**.

#. Double-click on **Certificate Templates** in the tree on the left. This will show all available certificate templates in a list on the right.

{% for template in templates | selectattr('from', 'defined') | list %}
#. Right-click on **{{ template.from }}** and click on **Duplicate Template** in the context menu.

#. Click on the **Compatibility** tab and make the following changes:

    #. In the *Certification Authority* dropdown, pick **Windows Server 2016** and click on **OK**.

    #. In the *Certificate recipients* dropdown, pick **Windows 10 / Windows Server 2016** and click on **OK**.

#. Click on the **General** tab and make the following changes:

    #. In the **Template display name** field, type ``{{ template.name }}``.

    #. In the **Validity period** field, specify ``{{ template.validity }}`` days.

    #. In the **Renewal period** field, specify ``{{ template.renewal_period }}`` days.

{% if template.publish %}
    #. Tick the options **Publish certificate in Active Directory** and **Do not automatically reenroll if a duplicate certificate exists in Active Directory**.
{% endif %}

#. Click on the **Cryptography** tab and make the following changes:

    #. In the **Provider Category** dropdown, pick **Key Storage Provider**.

{% if template.use_ec %}
    #. In the **Algorithm name** dropdown, pick **ECDH_P256**.
{% endif %}

    #. In the **Request Hash** dropdown, pick **SHA256**.

#. Click on the  **Request Handling** tab and make the following changes:

    #. Untick the option **Allow private key to be exported**.

#. Click on the **Security** tab and make the following changes:

{% for group in template.groups %}
    #. Click on **Add...**, type ``{{ group.name }}`` and click on **OK**.
{% if group.autoenroll %}
    #. Tick the options **Read**, **Enroll** and **Autoenroll**.
{% else %}
    #. Tick the options **Read** and **Enroll**.
{% endif %}
{% endfor %}

#. Click on the **Subject Name** tab and make the following changes:

{% if template.subject.email %}
    #. Tick the option **E-mail name**.
{% endif %}

{% if template.subject.dnsname %}
    #. Tick the option **DNS name**.
{% endif %}

{% if template.subject.upn %}
    #. Tick the option **UPN**.
{% endif %}

#. Click on **OK** to save the template.
{% endfor %}
{% endif %}

Enable autoenrollment
~~~~~~~~~~~~~~~~~~~~~

#. Click on the start button, type **Group Policy Management** and press **Enter**.

#. Right-click on **Domains → {{ customer.domain }} → Group Policy Objects → {{ autoenrollment.gpo | default('Default Domain Policy') }}** and click on **Edit** to open *Group Policy Management Editor*.

#. Expand **Computer Configuration → Policies → Windows Settings → Security Settings** and click on **Public Key Policies**. The public key policies is shown on the right. Double-click on **Certificate Services Client - Auto-enrollment** to open *Certificate Services Client - Auto-enrollment Properties*.

#. In the **Configuration Model** dropdown, pick **Enabled**.

#. Tick the option **Renew expired certificates, update pending certificates, and remove revoked certificates**.

#. Tick the option **Update certificates that use certificate templates**.

#. Click on **OK**.

#. Expand **User Configuration → Policies → Windows Settings → Security Settings** and click on **Public Key Policies**. The public key policies is shown on the right. Double-click on **Certificate Services Client - Auto-enrollment** to open *Certificate Services Client - Auto-enrollment Properties*.

#. In the **Configuration Model** dropdown, pick **Enabled**.

#. Tick the option **Renew expired certificates, update pending certificates, and remove revoked certificates**.

#. Tick the option **Update certificates that use certificate templates**.

#. Tick the option **Display user notifications for expiring certificates in user and machine MY store**.

#. Click on **OK**.

Enable certificate templates
----------------------------

{% for issuing_ca in servers.issuing_cas %}
Enable certificate templates for {{ issuing_ca.cn }}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~{{ issuing_ca.cn | length * '~' }}

#. Log in to ``{{ issuing_ca.name }}`` using RDP.

#. Pull any GPO changes from the domain controller::

    gpupdate

{% if issuing_ca.templates is defined %}
{% for template in issuing_ca.templates %}
#. Enable the template *{{ template }}* using PowerShell::

    Add-CATemplate -Name "{{ template | replace(' ', '') }}" -Force

{% endfor %}
{% else %}
{% for template in templates %}
#. Enable the template *{{ template.name }}* using PowerShell::

    Add-CATemplate -Name "{{ template.name | replace(' ', '') }}" -Force

{% endfor %}
{% endif %}
{% endfor %}